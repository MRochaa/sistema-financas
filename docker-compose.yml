version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: sistema-financas-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sistema_financas}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-suasenha}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-sistema_financas}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Aplicação completa (frontend + backend)
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: sistema-financas-app
    environment:
      # Variáveis do backend
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-suasenha}@postgres:5432/${POSTGRES_DB:-sistema_financas}?schema=public
      JWT_SECRET: ${JWT_SECRET:-seu_jwt_secret_aqui_muito_seguro}
      NODE_ENV: production
      PORT: 3001
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
    ports:
      - "80:80"  # Nginx serve tudo na porta 80
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      start_period: 120s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge