// Este arquivo define o esquema do banco de dados usando Prisma ORM
// Configuração do gerador e datasource

generator client {
  provider      = "prisma-client-js"
  // IMPORTANTE: Adicionar targets binários para Alpine Linux
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário - armazena informações de autenticação
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  accounts Account[]
  categories Category[]
  transactions Transaction[]
  budgets Budget[]
}

// Modelo de Conta - representa contas bancárias/carteiras
model Account {
  id          String   @id @default(uuid())
  name        String
  type        String   // checking, savings, credit_card, cash
  balance     Float    @default(0)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  @@index([userId])
}

// Modelo de Categoria - categorias de transações
model Category {
  id        String   @id @default(uuid())
  name      String
  type      String   // income, expense
  icon      String?
  color     String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets Budget[]
  
  @@index([userId])
  @@unique([name, userId])
}

// Modelo de Transação - registros financeiros
model Transaction {
  id          String   @id @default(uuid())
  description String
  amount      Float
  type        String   // income, expense, transfer
  date        DateTime
  userId      String
  accountId   String
  categoryId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
  @@index([date])
}

// Modelo de Orçamento - controle de gastos por categoria
model Budget {
  id         String   @id @default(uuid())
  amount     Float
  period     String   // monthly, yearly
  startDate  DateTime
  endDate    DateTime
  userId     String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([categoryId])
  @@unique([userId, categoryId, period, startDate])
}
