#!/bin/bash

# Script de inicializa√ß√£o do container
# Gerencia o startup do backend Node.js e frontend Nginx

# IMPORTANTE: Debug completo
set -e  # Para em qualquer erro
set -x  # Mostra cada comando executado (DEBUG)

# Trap para capturar erros e mostrar onde falhou
trap 'echo "‚ùå ERRO na linha $LINENO do start.sh"' ERR

echo "=== INICIANDO SISTEMA ==="
echo "Vari√°veis de ambiente:"
env | grep -E "PORT|DATABASE_URL|NODE_ENV" || true

# Definir PORT explicitamente
export PORT=3001
export NODE_ENV=production

echo "üîå PORT configurada: $PORT"
echo "üìä NODE_ENV: $NODE_ENV"

# Fun√ß√£o para verificar se o backend est√° pronto
check_backend() {
    local backend_port=${PORT:-3001}
    curl -s http://localhost:${backend_port}/api/health > /dev/null 2>&1
    return $?
}

# VERIFICA√á√ÉO 1: Estrutura existe?
echo "üìÅ Verificando estrutura do backend:"
ls -la /app/backend/
ls -la /app/backend/src/

# VERIFICA√á√ÉO 2: package.json tem script start?
echo "üì¶ Scripts dispon√≠veis:"
cat /app/backend/package.json | grep -A5 '"scripts"'

# VERIFICA√á√ÉO 3: Arquivo principal existe?
if [ ! -f "/app/backend/src/server.js" ]; then
    echo "‚ùå ERRO: src/server.js n√£o encontrado!"
    echo "Procurando arquivo principal..."
    find /app/backend -name "*.js" -type f | head -20
    exit 1
fi
echo "‚úÖ server.js encontrado"

cd /app/backend

# VERIFICA√á√ÉO 4: Testar conex√£o com banco ANTES de iniciar
echo "üîÑ Testando conex√£o com banco de dados..."
npx prisma db push --skip-generate || {
    echo "‚ö†Ô∏è Banco de dados n√£o acess√≠vel, continuando mesmo assim..."
}

# INICIAR BACKEND com logs detalhados
echo "üöÄ Iniciando backend na porta $PORT..."

# IMPORTANTE: Use node direto, n√£o npm start (para ver erros)
node src/server.js 2>&1 | tee /tmp/backend.log &
BACKEND_PID=$!

echo "Backend iniciado com PID: $BACKEND_PID"

# Aguardar backend inicializar
echo "‚è≥ Aguardando backend..."
for i in {1..30}; do
    # Verificar se processo ainda est√° vivo
    if ! kill -0 $BACKEND_PID 2>/dev/null; then
        echo "‚ùå Backend morreu! √öltimas linhas do log:"
        tail -20 /tmp/backend.log
        exit 1
    fi
    
    # Verificar se est√° respondendo
    if curl -s http://localhost:$PORT/api/health > /dev/null 2>&1; then
        echo "‚úÖ Backend respondendo!"
        break
    fi
    
    echo "Tentativa $i/30..."
    sleep 2
done

# Se n√£o respondeu ap√≥s 30 tentativas
if ! curl -s http://localhost:$PORT/api/health > /dev/null 2>&1; then
    echo "‚ùå Backend n√£o respondeu ap√≥s 60 segundos!"
    echo "üìã Log do backend:"
    cat /tmp/backend.log
    echo "üìä Processos rodando:"
    ps aux
    echo "üîå Portas abertas:"
    netstat -tlpn 2>/dev/null || ss -tlpn
    exit 1
fi

# NGINX
echo "üîß Configurando Nginx..."
nginx -t || exit 1

echo "üåê Iniciando Nginx..."
nginx -g 'daemon off;' &
NGINX_PID=$!

# Monitor loop
while true; do
    if ! kill -0 $BACKEND_PID 2>/dev/null; then
        echo "‚ùå Backend morreu!"
        tail -20 /tmp/backend.log
        exit 1
    fi
    if ! kill -0 $NGINX_PID 2>/dev/null; then
        echo "‚ùå Nginx morreu!"
        exit 1
    fi
    
    # A cada 10 segundos, verificar se backend responde
    if ! curl -s http://localhost:$PORT/api/health > /dev/null 2>&1; then
        echo "‚ö†Ô∏è Backend parou de responder!"
        echo "Log recente:"
        tail -10 /tmp/backend.log
    else
        echo "‚úÖ Sistema OK - Backend: $BACKEND_PID, Nginx: $NGINX_PID"
    fi
    
    sleep 10
done
