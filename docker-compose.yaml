services:
  # Banco de dados PostgreSQL (opcional - pode usar banco externo)
  postgres:
    image: postgres:15-alpine
    container_name: financas-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-financas_lar}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-financas_lar}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - financas-network
    security_opt:
      - no-new-privileges:true
    # Comentado por padrão - descomente se quiser usar banco local
    profiles:
      - local-db

  # Aplicação principal (frontend + backend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: financas-app
    restart: unless-stopped
    environment:
      # Database - usa banco externo por padrão, local se postgres estiver ativo
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-financas_lar}?schema=public}
      
      # Backend
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${BACKEND_PORT:-3001}
      FRONTEND_URL: ${FRONTEND_URL}
      
      # Security
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # Frontend
      VITE_API_URL: ${VITE_API_URL:-/api}
    
    ports:
      - "${APP_PORT:-80}:80"  # Nginx serve na porta 80
    
    # Dependências - só depende do postgres se estiver ativo
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    #     required: false
    
    volumes:
      - app_logs:/app/logs
    
    networks:
      - financas-network
      # Rede externa para Coolify (se disponível)
      # - coolify
    
    security_opt:
      - no-new-privileges:true
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Recursos limitados
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Volumes persistentes
volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local

# Redes
networks:
  financas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  # Rede externa para Coolify (opcional)
  # coolify:
  #   external: true